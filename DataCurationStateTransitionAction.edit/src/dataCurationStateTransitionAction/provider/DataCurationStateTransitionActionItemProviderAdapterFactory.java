/**
 */
package dataCurationStateTransitionAction.provider;

import dataCurationStateTransitionAction.util.DataCurationStateTransitionActionAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DataCurationStateTransitionActionItemProviderAdapterFactory extends DataCurationStateTransitionActionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DataCurationStateTransitionActionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.DataCurationStateTransitionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataCurationStateTransitionActionItemProvider dataCurationStateTransitionActionItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.DataCurationStateTransitionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataCurationStateTransitionActionAdapter() {
		if (dataCurationStateTransitionActionItemProvider == null) {
			dataCurationStateTransitionActionItemProvider = new DataCurationStateTransitionActionItemProvider(this);
		}

		return dataCurationStateTransitionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.Data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemProvider dataItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.Data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAdapter() {
		if (dataItemProvider == null) {
			dataItemProvider = new DataItemProvider(this);
		}

		return dataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.InitialDataAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialDataAnalysisItemProvider initialDataAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.InitialDataAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialDataAnalysisAdapter() {
		if (initialDataAnalysisItemProvider == null) {
			initialDataAnalysisItemProvider = new InitialDataAnalysisItemProvider(this);
		}

		return initialDataAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.ExploratoryDataAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExploratoryDataAnalysisItemProvider exploratoryDataAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.ExploratoryDataAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExploratoryDataAnalysisAdapter() {
		if (exploratoryDataAnalysisItemProvider == null) {
			exploratoryDataAnalysisItemProvider = new ExploratoryDataAnalysisItemProvider(this);
		}

		return exploratoryDataAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.DataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataValueItemProvider dataValueItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.DataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataValueAdapter() {
		if (dataValueItemProvider == null) {
			dataValueItemProvider = new DataValueItemProvider(this);
		}

		return dataValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.NullValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullValuesItemProvider nullValuesItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.NullValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullValuesAdapter() {
		if (nullValuesItemProvider == null) {
			nullValuesItemProvider = new NullValuesItemProvider(this);
		}

		return nullValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.MissingValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissingValuesItemProvider missingValuesItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.MissingValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissingValuesAdapter() {
		if (missingValuesItemProvider == null) {
			missingValuesItemProvider = new MissingValuesItemProvider(this);
		}

		return missingValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.RSquare} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RSquareItemProvider rSquareItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.RSquare}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRSquareAdapter() {
		if (rSquareItemProvider == null) {
			rSquareItemProvider = new RSquareItemProvider(this);
		}

		return rSquareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.PValueFSignificance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PValueFSignificanceItemProvider pValueFSignificanceItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.PValueFSignificance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPValueFSignificanceAdapter() {
		if (pValueFSignificanceItemProvider == null) {
			pValueFSignificanceItemProvider = new PValueFSignificanceItemProvider(this);
		}

		return pValueFSignificanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.UnitaryAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitaryAnalysisItemProvider unitaryAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.UnitaryAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitaryAnalysisAdapter() {
		if (unitaryAnalysisItemProvider == null) {
			unitaryAnalysisItemProvider = new UnitaryAnalysisItemProvider(this);
		}

		return unitaryAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.BiVariateAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BiVariateAnalysisItemProvider biVariateAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.BiVariateAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBiVariateAnalysisAdapter() {
		if (biVariateAnalysisItemProvider == null) {
			biVariateAnalysisItemProvider = new BiVariateAnalysisItemProvider(this);
		}

		return biVariateAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.UnivariateVisualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnivariateVisualizationItemProvider univariateVisualizationItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.UnivariateVisualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnivariateVisualizationAdapter() {
		if (univariateVisualizationItemProvider == null) {
			univariateVisualizationItemProvider = new UnivariateVisualizationItemProvider(this);
		}

		return univariateVisualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.BiVariateVisualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BiVariateVisualizationItemProvider biVariateVisualizationItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.BiVariateVisualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBiVariateVisualizationAdapter() {
		if (biVariateVisualizationItemProvider == null) {
			biVariateVisualizationItemProvider = new BiVariateVisualizationItemProvider(this);
		}

		return biVariateVisualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.NormalizationStandardization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalizationStandardizationItemProvider normalizationStandardizationItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.NormalizationStandardization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalizationStandardizationAdapter() {
		if (normalizationStandardizationItemProvider == null) {
			normalizationStandardizationItemProvider = new NormalizationStandardizationItemProvider(this);
		}

		return normalizationStandardizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataCurationStateTransitionAction.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link dataCurationStateTransitionAction.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataCurationStateTransitionActionItemProvider != null) dataCurationStateTransitionActionItemProvider.dispose();
		if (dataItemProvider != null) dataItemProvider.dispose();
		if (initialDataAnalysisItemProvider != null) initialDataAnalysisItemProvider.dispose();
		if (exploratoryDataAnalysisItemProvider != null) exploratoryDataAnalysisItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (dataValueItemProvider != null) dataValueItemProvider.dispose();
		if (nullValuesItemProvider != null) nullValuesItemProvider.dispose();
		if (missingValuesItemProvider != null) missingValuesItemProvider.dispose();
		if (rSquareItemProvider != null) rSquareItemProvider.dispose();
		if (pValueFSignificanceItemProvider != null) pValueFSignificanceItemProvider.dispose();
		if (unitaryAnalysisItemProvider != null) unitaryAnalysisItemProvider.dispose();
		if (biVariateAnalysisItemProvider != null) biVariateAnalysisItemProvider.dispose();
		if (univariateVisualizationItemProvider != null) univariateVisualizationItemProvider.dispose();
		if (biVariateVisualizationItemProvider != null) biVariateVisualizationItemProvider.dispose();
		if (normalizationStandardizationItemProvider != null) normalizationStandardizationItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
	}

}
